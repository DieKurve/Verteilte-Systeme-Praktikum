/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef getCentralData_H
#define getCentralData_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"

namespace serviceProvider {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class getCentralDataIf {
 public:
  virtual ~getCentralDataIf() {}
  virtual void pingServer() = 0;
  virtual void sendData(const std::vector<sensorData> & data) = 0;
};

class getCentralDataIfFactory {
 public:
  typedef getCentralDataIf Handler;

  virtual ~getCentralDataIfFactory() {}

  virtual getCentralDataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(getCentralDataIf* /* handler */) = 0;
};

class getCentralDataIfSingletonFactory : virtual public getCentralDataIfFactory {
 public:
  getCentralDataIfSingletonFactory(const ::std::shared_ptr<getCentralDataIf>& iface) : iface_(iface) {}
  virtual ~getCentralDataIfSingletonFactory() {}

  virtual getCentralDataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(getCentralDataIf* /* handler */) {}

 protected:
  ::std::shared_ptr<getCentralDataIf> iface_;
};

class getCentralDataNull : virtual public getCentralDataIf {
 public:
  virtual ~getCentralDataNull() {}
  void pingServer() {
    return;
  }
  void sendData(const std::vector<sensorData> & /* data */) {
    return;
  }
};


class getCentralData_pingServer_args {
 public:

  getCentralData_pingServer_args(const getCentralData_pingServer_args&);
  getCentralData_pingServer_args& operator=(const getCentralData_pingServer_args&);
  getCentralData_pingServer_args() {
  }

  virtual ~getCentralData_pingServer_args() noexcept;

  bool operator == (const getCentralData_pingServer_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const getCentralData_pingServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getCentralData_pingServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_pingServer_pargs {
 public:


  virtual ~getCentralData_pingServer_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_pingServer_result {
 public:

  getCentralData_pingServer_result(const getCentralData_pingServer_result&);
  getCentralData_pingServer_result& operator=(const getCentralData_pingServer_result&);
  getCentralData_pingServer_result() {
  }

  virtual ~getCentralData_pingServer_result() noexcept;

  bool operator == (const getCentralData_pingServer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const getCentralData_pingServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getCentralData_pingServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_pingServer_presult {
 public:


  virtual ~getCentralData_pingServer_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _getCentralData_sendData_args__isset {
  _getCentralData_sendData_args__isset() : data(false) {}
  bool data :1;
} _getCentralData_sendData_args__isset;

class getCentralData_sendData_args {
 public:

  getCentralData_sendData_args(const getCentralData_sendData_args&);
  getCentralData_sendData_args& operator=(const getCentralData_sendData_args&);
  getCentralData_sendData_args() {
  }

  virtual ~getCentralData_sendData_args() noexcept;
  std::vector<sensorData>  data;

  _getCentralData_sendData_args__isset __isset;

  void __set_data(const std::vector<sensorData> & val);

  bool operator == (const getCentralData_sendData_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const getCentralData_sendData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getCentralData_sendData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_sendData_pargs {
 public:


  virtual ~getCentralData_sendData_pargs() noexcept;
  const std::vector<sensorData> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_sendData_result {
 public:

  getCentralData_sendData_result(const getCentralData_sendData_result&);
  getCentralData_sendData_result& operator=(const getCentralData_sendData_result&);
  getCentralData_sendData_result() {
  }

  virtual ~getCentralData_sendData_result() noexcept;

  bool operator == (const getCentralData_sendData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const getCentralData_sendData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getCentralData_sendData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getCentralData_sendData_presult {
 public:


  virtual ~getCentralData_sendData_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class getCentralDataClient : virtual public getCentralDataIf {
 public:
  getCentralDataClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  getCentralDataClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pingServer();
  void send_pingServer();
  void recv_pingServer();
  void sendData(const std::vector<sensorData> & data);
  void send_sendData(const std::vector<sensorData> & data);
  void recv_sendData();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class getCentralDataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<getCentralDataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (getCentralDataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pingServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  getCentralDataProcessor(::std::shared_ptr<getCentralDataIf> iface) :
    iface_(iface) {
    processMap_["pingServer"] = &getCentralDataProcessor::process_pingServer;
    processMap_["sendData"] = &getCentralDataProcessor::process_sendData;
  }

  virtual ~getCentralDataProcessor() {}
};

class getCentralDataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  getCentralDataProcessorFactory(const ::std::shared_ptr< getCentralDataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< getCentralDataIfFactory > handlerFactory_;
};

class getCentralDataMultiface : virtual public getCentralDataIf {
 public:
  getCentralDataMultiface(std::vector<std::shared_ptr<getCentralDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~getCentralDataMultiface() {}
 protected:
  std::vector<std::shared_ptr<getCentralDataIf> > ifaces_;
  getCentralDataMultiface() {}
  void add(::std::shared_ptr<getCentralDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pingServer() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pingServer();
    }
    ifaces_[i]->pingServer();
  }

  void sendData(const std::vector<sensorData> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendData(data);
    }
    ifaces_[i]->sendData(data);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class getCentralDataConcurrentClient : virtual public getCentralDataIf {
 public:
  getCentralDataConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  getCentralDataConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pingServer();
  int32_t send_pingServer();
  void recv_pingServer(const int32_t seqid);
  void sendData(const std::vector<sensorData> & data);
  int32_t send_sendData(const std::vector<sensorData> & data);
  void recv_sendData(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
