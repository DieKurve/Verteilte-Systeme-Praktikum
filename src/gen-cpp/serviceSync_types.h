/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef serviceSync_TYPES_H
#define serviceSync_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class syncData;

typedef struct _syncData__isset {
  _syncData__isset() : id(false), value(false), timestamp(false) {}
  bool id :1;
  bool value :1;
  bool timestamp :1;
} _syncData__isset;

class syncData : public virtual ::apache::thrift::TBase {
 public:

  syncData(const syncData&);
  syncData& operator=(const syncData&);
  syncData() : id(0), value(0), timestamp() {
  }

  virtual ~syncData() noexcept;
  int32_t id;
  int32_t value;
  std::string timestamp;

  _syncData__isset __isset;

  void __set_id(const int32_t val);

  void __set_value(const int32_t val);

  void __set_timestamp(const std::string& val);

  bool operator == (const syncData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const syncData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const syncData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(syncData &a, syncData &b);

std::ostream& operator<<(std::ostream& out, const syncData& obj);



#endif
